/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package biz.qianyan.search.express.web.action;

import java.io.Reader;
import java.io.StringReader;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.TokenStream;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import biz.qianyan.search.express.document.ExpressDocument;
import biz.qianyan.search.express.query.ExpressSearcher;
import biz.qianyan.search.express.web.Navbar;
import biz.qianyan.search.express.web.form.PatentForm;
import biz.qianyan.search.express.web.form.ReleateForm;
import biz.qianyan.search.express.web.form.SearchForm;
import biz.qianyan.search.patent.document.PatentDocument;
import biz.qianyan.search.patent.query.PatentSearcher;

/**
 * MyEclipse Struts Creation date: 07-14-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/releate" name="releateForm" input="/releate.jsp" scope="request" validate="true"
 * @struts.action-forward name="RESULT" path="/releate.jsp"
 */
public class ReleateAction extends Action {

    private Analyzer analyzer;
    private ExpressSearcher searcher;
    private PatentSearcher psearcher;

    /*
     * Generated Methods
     */

    /**
     * @return the analyzer
     */
    public Analyzer getAnalyzer() {
        return analyzer;
    }

    /**
     * @param analyzer the analyzer to set
     */
    public void setAnalyzer(Analyzer analyzer) {
        this.analyzer = analyzer;
    }

    /**
     * @return the searcher
     */
    public ExpressSearcher getSearcher() {
        return searcher;
    }

    /**
     * @param searcher the searcher to set
     */
    public void setSearcher(ExpressSearcher searcher) {
        this.searcher = searcher;
    }

    /**
     * @return the psearcher
     */
    public PatentSearcher getPsearcher() {
        return psearcher;
    }

    /**
     * @param psearcher the psearcher to set
     */
    public void setPsearcher(PatentSearcher psearcher) {
        this.psearcher = psearcher;
    }

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ReleateForm releateForm = (ReleateForm) form;
        try {
            Reader reader = new StringReader(releateForm.getT());
            TokenStream ts = analyzer.tokenStream("", reader);
            Token token = null;
            analyzer.tokenStream("", reader);
            StringBuffer s = new StringBuffer();
            while (ts.incrementToken()) {

                s.append(token.termBuffer(), 0, token.termLength());
                s.append(" | ");
            }
            String query = s.substring(0, s.length() - 3);
            Navbar page = new Navbar(1);
            List l = null;
            if (releateForm.getS() == 6) {
                PatentForm patentForm = new PatentForm();
                patentForm.setQ(query);
                patentForm.setT(1);
                patentForm.setS(0);
                l = psearcher.search(patentForm, page);
                for (int i = 0; i < l.size(); i++) {
                    PatentDocument ed = (PatentDocument) l.get(i);
                    if (ed.getTitle().length() > 14) {
                        ed.setTitle(ed.getTitle().substring(0, 14) + "..");
                    }
                }
            } else {
                SearchForm searchForm = new SearchForm();
                searchForm.setQ(query);
                searchForm.setS(0);
                searchForm.setT(releateForm.getS());
                l = searcher.search(searchForm, page);
                for (int i = 0; i < l.size(); i++) {
                    ExpressDocument ed = (ExpressDocument) l.get(i);
                    if (ed.getOrititle().length() > 14) {
                        ed.setTitle(ed.getOrititle().substring(0, 14) + "..");
                    }
                }
            }
            request.setAttribute("list", l);
            request.setAttribute("arg", releateForm);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mapping.getInputForward();
    }
}
